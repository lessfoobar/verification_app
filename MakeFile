# User Verification Service - Makefile
# Builds and deploys the verification service using Podman Compose

# Colors for output
RED    := \033[0;31m
GREEN  := \033[0;32m
YELLOW := \033[1;33m
BLUE   := \033[0;34m
NC     := \033[0m

# Configuration
PROJECT_NAME := verification-service
COMPOSE_FILE := podman-compose.yml
ENV_FILE := .env
ENV_TEMPLATE := .env-template

# Default target
.DEFAULT_GOAL := help

# Check if .env file exists
.PHONY: check-env
check-env:
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå Error: $(ENV_FILE) file not found!$(NC)"; \
		echo "Please copy $(ENV_TEMPLATE) to $(ENV_FILE) and configure your settings."; \
		echo ""; \
		echo "$(YELLOW)Run: make setup$(NC)"; \
		exit 1; \
	fi

# Check if required tools are installed
.PHONY: check-deps
check-deps:
	@echo "$(BLUE)üîç Checking dependencies...$(NC)"
	@command -v podman >/dev/null 2>&1 || { \
		echo "$(RED)‚ùå Error: Podman is not installed!$(NC)"; \
		echo "Please install Podman first:"; \
		echo "sudo dnf install -y podman podman-compose"; \
		exit 1; \
	}
	@command -v podman-compose >/dev/null 2>&1 || { \
		echo "$(RED)‚ùå Error: Podman Compose is not installed!$(NC)"; \
		echo "Please install Podman Compose first:"; \
		echo "sudo dnf install -y podman-compose"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ All dependencies are installed$(NC)"

# Initial project setup
.PHONY: setup
setup:
	@echo "$(BLUE)üöÄ Setting up User Verification Service$(NC)"
	@echo "=========================================="
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(YELLOW)üìù Creating $(ENV_FILE) from template...$(NC)"; \
		cp $(ENV_TEMPLATE) $(ENV_FILE); \
		echo "$(GREEN)‚úÖ Environment file created$(NC)"; \
		echo ""; \
		echo "$(YELLOW)‚ö†Ô∏è  Please edit $(ENV_FILE) with your configuration before proceeding$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  $(ENV_FILE) already exists$(NC)"; \
	fi
	@mkdir -p config/{ssl,backups}
	@echo "$(GREEN)‚úÖ Project setup completed$(NC)"

# Build all containers
.PHONY: build
build: check-deps check-env
	@echo "$(BLUE)üî® Building User Verification Service Containers$(NC)"
	@echo "=================================================="
	@echo "$(YELLOW)üì¶ Building containers...$(NC)"
	@podman-compose build
	@echo ""
	@echo "$(GREEN)üéâ All containers built successfully!$(NC)"
	@echo ""
	@echo "$(BLUE)üìã Built containers:$(NC)"
	@podman images | grep "$(PROJECT_NAME)" | awk '{print "   üê≥ " $$1 ":" $$2}' || true
	@echo ""
	@echo "$(YELLOW)üí° Next steps:$(NC)"
	@echo "   1. Review your $(ENV_FILE) configuration"
	@echo "   2. Run 'make up' to start all services"
	@echo "   3. Access the application at http://localhost"

# Build specific container
.PHONY: build-postgres build-redis build-nginx build-api build-frontend
build-postgres: check-deps check-env
	@echo "$(YELLOW)üì¶ Building PostgreSQL container...$(NC)"
	@podman-compose build postgres
	@echo "$(GREEN)‚úÖ PostgreSQL container built$(NC)"

build-redis: check-deps check-env
	@echo "$(YELLOW)üì¶ Building Redis container...$(NC)"
	@podman-compose build redis
	@echo "$(GREEN)‚úÖ Redis container built$(NC)"

build-nginx: check-deps check-env
	@echo "$(YELLOW)üì¶ Building Nginx container...$(NC)"
	@podman-compose build nginx
	@echo "$(GREEN)‚úÖ Nginx container built$(NC)"

build-api: check-deps check-env
	@echo "$(YELLOW)üì¶ Building API containers...$(NC)"
	@podman-compose build api-grpc api-http
	@echo "$(GREEN)‚úÖ API containers built$(NC)"

build-frontend: check-deps check-env
	@echo "$(YELLOW)üì¶ Building Frontend container...$(NC)"
	@podman-compose build frontend
	@echo "$(GREEN)‚úÖ Frontend container built$(NC)"

# Force rebuild (no cache)
.PHONY: rebuild
rebuild: check-deps check-env
	@echo "$(YELLOW)üîÑ Force rebuilding all containers (no cache)...$(NC)"
	@podman-compose build --no-cache
	@echo "$(GREEN)‚úÖ All containers rebuilt$(NC)"

# Start all services
.PHONY: up start
up start: check-deps check-env
	@echo "$(BLUE)üöÄ Starting User Verification Service$(NC)"
	@echo "======================================"
	@echo "$(YELLOW)üîÑ Starting all services...$(NC)"
	@mkdir -p config/{ssl,backups}
	@podman-compose up -d
	@echo ""
	@echo "$(YELLOW)‚è≥ Waiting for services to initialize...$(NC)"
	@sleep 10
	@$(MAKE) --no-print-directory status
	@echo ""
	@echo "$(GREEN)üéâ Deployment completed successfully!$(NC)"
	@echo ""
	@$(MAKE) --no-print-directory endpoints

# Start services in foreground
.PHONY: up-fg
up-fg: check-deps check-env
	@echo "$(YELLOW)üîÑ Starting services in foreground...$(NC)"
	@mkdir -p config/{ssl,backups}
	@podman-compose up

# Stop all services
.PHONY: down stop
down stop: check-deps
	@echo "$(YELLOW)üõë Stopping all services...$(NC)"
	@podman-compose down
	@echo "$(GREEN)‚úÖ All services stopped$(NC)"

# Restart all services
.PHONY: restart
restart: check-deps check-env
	@echo "$(YELLOW)üîÑ Restarting all services...$(NC)"
	@podman-compose restart
	@sleep 5
	@$(MAKE) --no-print-directory status
	@echo "$(GREEN)‚úÖ All services restarted$(NC)"

# Show service status
.PHONY: status
status: check-deps
	@echo "$(BLUE)üìä Service Status:$(NC)"
	@echo "=================="
	@podman-compose ps

# Show access endpoints
.PHONY: endpoints
endpoints: check-env
	@echo "$(BLUE)üì± Access Points:$(NC)"
	@source $(ENV_FILE) && \
	echo "   üåê Frontend:     http://localhost:$${FRONTEND_PORT:-3000}"; \
	echo "   üîå HTTP API:     http://localhost:$${API_HTTP_PORT:-8001}"; \
	echo "   üóÑÔ∏è  PostgreSQL:  localhost:$${POSTGRES_PORT:-5432}"; \
	echo "   üî¥ Redis:        localhost:$${REDIS_PORT:-6379}"; \
	if [ "$${USE_SSL:-false}" = "true" ]; then \
		echo "   üîí HTTPS:        https://$${DOMAIN:-localhost}"; \
	fi

# View logs
.PHONY: logs
logs: check-deps
	@echo "$(BLUE)üìã Logs for all services:$(NC)"
	@podman-compose logs -f

# View logs for specific service
.PHONY: logs-postgres logs-redis logs-api-grpc logs-api-http logs-frontend logs-nginx
logs-postgres: check-deps
	@echo "$(BLUE)üìã PostgreSQL logs:$(NC)"
	@podman-compose logs -f postgres

logs-redis: check-deps
	@echo "$(BLUE)üìã Redis logs:$(NC)"
	@podman-compose logs -f redis

logs-api-grpc: check-deps
	@echo "$(BLUE)üìã gRPC API logs:$(NC)"
	@podman-compose logs -f api-grpc

logs-api-http: check-deps
	@echo "$(BLUE)üìã HTTP API logs:$(NC)"
	@podman-compose logs -f api-http

logs-frontend: check-deps
	@echo "$(BLUE)üìã Frontend logs:$(NC)"
	@podman-compose logs -f frontend

logs-nginx: check-deps
	@echo "$(BLUE)üìã Nginx logs:$(NC)"
	@podman-compose logs -f nginx

# Health check for all services
.PHONY: health
health: check-deps
	@echo "$(BLUE)üè• Health Check Results:$(NC)"
	@echo "========================"
	@services="postgres redis api-grpc api-http frontend nginx"; \
	for service in $$services; do \
		container_name="verification-$$service"; \
		if podman-compose ps | grep -q "$$container_name.*healthy"; then \
			echo "   $(GREEN)‚úÖ $$service$(NC)"; \
		elif podman-compose ps | grep -q "$$container_name.*unhealthy"; then \
			echo "   $(RED)‚ùå $$service$(NC)"; \
		elif podman-compose ps | grep -q "$$container_name.*Up"; then \
			echo "   $(YELLOW)‚è≥ $$service (starting)$(NC)"; \
		else \
			echo "   $(RED)üî¥ $$service (not running)$(NC)"; \
		fi; \
	done

# Clean up containers and volumes
.PHONY: clean
clean: check-deps
	@echo "$(YELLOW)üßπ Cleaning up containers and volumes...$(NC)"
	@podman-compose down -v
	@podman system prune -f
	@echo "$(GREEN)‚úÖ Cleanup completed$(NC)"

# Create database backup
.PHONY: backup
backup: check-deps check-env
	@echo "$(YELLOW)üíæ Creating database backup...$(NC)"
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	backup_file="config/backups/backup_$$timestamp.sql"; \
	source $(ENV_FILE); \
	podman exec verification-postgres pg_dump -U "$${POSTGRES_USER}" "$${POSTGRES_DB}" > "$$backup_file"; \
	if [ -f "$$backup_file" ]; then \
		echo "$(GREEN)‚úÖ Backup created: $$backup_file$(NC)"; \
	else \
		echo "$(RED)‚ùå Backup failed$(NC)"; \
		exit 1; \
	fi

# Restore database from backup
.PHONY: restore
restore: check-deps check-env
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå Please specify backup file: make restore FILE=<backup_file>$(NC)"; \
		exit 1; \
	fi; \
	if [ ! -f "$(FILE)" ]; then \
		echo "$(RED)‚ùå Backup file not found: $(FILE)$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)üì• Restoring database from $(FILE)...$(NC)"; \
	source $(ENV_FILE); \
	podman exec -i verification-postgres psql -U "$${POSTGRES_USER}" "$${POSTGRES_DB}" < "$(FILE)"; \
	echo "$(GREEN)‚úÖ Database restored$(NC)"

# Development helpers
.PHONY: dev
dev: check-deps check-env
	@echo "$(BLUE)üõ†Ô∏è  Starting development environment...$(NC)"
	@$(MAKE) --no-print-directory up
	@echo ""
	@echo "$(YELLOW)üí° Development tips:$(NC)"
	@echo "   - View logs: make logs"
	@echo "   - Restart service: make restart"
	@echo "   - Check health: make health"
	@echo "   - Stop services: make down"

# Test database connection
.PHONY: test-db
test-db: check-deps check-env
	@echo "$(YELLOW)üîç Testing database connection...$(NC)"
	@source $(ENV_FILE); \
	if podman exec verification-postgres pg_isready -U "$${POSTGRES_USER}" -d "$${POSTGRES_DB}"; then \
		echo "$(GREEN)‚úÖ Database connection successful$(NC)"; \
	else \
		echo "$(RED)‚ùå Database connection failed$(NC)"; \
		exit 1; \
	fi

# Test Redis connection
.PHONY: test-redis
test-redis: check-deps
	@echo "$(YELLOW)üîç Testing Redis connection...$(NC)"
	@if podman exec verification-redis redis-cli ping | grep -q "PONG"; then \
		echo "$(GREEN)‚úÖ Redis connection successful$(NC)"; \
	else \
		echo "$(RED)‚ùå Redis connection failed$(NC)"; \
		exit 1; \
	fi

# Run all tests
.PHONY: test
test: test-db test-redis
	@echo "$(GREEN)‚úÖ All connection tests passed$(NC)"

# Show container resource usage
.PHONY: stats
stats: check-deps
	@echo "$(BLUE)üìä Container Resource Usage:$(NC)"
	@echo "============================"
	@podman stats --no-stream

# Open shell in container
.PHONY: shell-postgres shell-redis shell-api shell-frontend shell-nginx
shell-postgres: check-deps
	@podman exec -it verification-postgres bash

shell-redis: check-deps
	@podman exec -it verification-redis bash

shell-api: check-deps
	@podman exec -it verification-api-grpc bash

shell-frontend: check-deps
	@podman exec -it verification-frontend bash

shell-nginx: check-deps
	@podman exec -it verification-nginx bash

# Generate SSL certificates (development only)
.PHONY: ssl-dev
ssl-dev:
	@echo "$(YELLOW)üîê Generating development SSL certificates...$(NC)"
	@mkdir -p config/ssl
	@./generate_ca_csr_crt.sh

# Pull latest base images
.PHONY: pull
pull: check-deps
	@echo "$(YELLOW)üì• Pulling latest base images...$(NC)"
	@podman pull registry.fedoraproject.org/fedora:42
	@podman pull registry.fedoraproject.org/fedora-minimal:42
	@podman pull quay.io/fedora/fedora:latest
	@echo "$(GREEN)‚úÖ Base images updated$(NC)"

# Show help
.PHONY: help
help:
	@echo "$(BLUE)User Verification Service - Makefile$(NC)"
	@echo "========================================"
	@echo ""
	@echo "$(YELLOW)Setup Commands:$(NC)"
	@echo "  setup        Initialize project (create .env from template)"
	@echo "  check-deps   Check if required tools are installed"
	@echo "  check-env    Check if .env file exists"
	@echo ""
	@echo "$(YELLOW)Build Commands:$(NC)"
	@echo "  build        Build all containers"
	@echo "  rebuild      Force rebuild all containers (no cache)"
	@echo "  build-*      Build specific container (postgres, redis, api, etc.)"
	@echo "  pull         Pull latest base images"
	@echo ""
	@echo "$(YELLOW)Service Management:$(NC)"
	@echo "  up, start    Start all services in background"
	@echo "  up-fg        Start all services in foreground"
	@echo "  down, stop   Stop all services"
	@echo "  restart      Restart all services"
	@echo "  status       Show service status"
	@echo "  health       Show health status of all services"
	@echo ""
	@echo "$(YELLOW)Monitoring & Debugging:$(NC)"
	@echo "  logs         Show logs for all services"
	@echo "  logs-*       Show logs for specific service"
	@echo "  stats        Show container resource usage"
	@echo "  endpoints    Show service access points"
	@echo ""
	@echo "$(YELLOW)Database & Backup:$(NC)"
	@echo "  backup       Create database backup"
	@echo "  restore      Restore database (usage: make restore FILE=backup.sql)"
	@echo "  test-db      Test database connection"
	@echo "  test-redis   Test Redis connection"
	@echo "  test         Run all connection tests"
	@echo ""
	@echo "$(YELLOW)Development:$(NC)"
	@echo "  dev          Start development environment"
	@echo "  shell-*      Open shell in container"
	@echo "  ssl-dev      Generate development SSL certificates"
	@echo ""
	@echo "$(YELLOW)Maintenance:$(NC)"
	@echo "  clean        Stop services and clean up volumes"
	@echo "  help         Show this help message"
	@echo ""
	@echo "$(YELLOW)Examples:$(NC)"
	@echo "  make setup"
	@echo "  make build"
	@echo "  make up"
	@echo "  make logs-postgres"
	@echo "  make backup"
	@echo "  make restore FILE=config/backups/backup_20250527_120000.sql"