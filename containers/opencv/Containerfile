# -------------------------------
# Stage 1: Builder
# -------------------------------
FROM quay.io/fedora/fedora:latest as builder

LABEL stage=builder

# Install build dependencies
RUN dnf update -y && \
    dnf install -y \
        python3 \
        python3-pip \
        python3-devel \
        gcc \
        gcc-c++ \
        cmake \
        pkg-config \
        opencv \
        opencv-devel \
        python3-opencv \
        python3-numpy \
        curl \
        wget \
        unzip \
        libgomp \
        glib2-devel \
        libstdc++-devel \
        atlas-devel \
        blas-devel \
        lapack-devel

# Create working directory
WORKDIR /app

# Copy requirements and install Python packages
COPY requirements.txt .
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir -r requirements.txt

# Copy application files
COPY *.py ./

# Run model preparation and testing
RUN python3 test_models.py

# -------------------------------
# Stage 2: Runtime
# -------------------------------
FROM quay.io/fedora/fedora:latest

# Metadata
LABEL maintainer="verification-service@example.com"
LABEL description="Production Face Detection + Liveness Verification Service"
LABEL version="1.0.0"

# Install runtime dependencies only
RUN dnf update -y && \
    dnf install -y \
        python3 \
        python3-pip \
        opencv \
        python3-opencv \
        python3-numpy \
        libgomp \
        curl \
        glib2 \
        libstdc++ \
        atlas \
        blas \
        lapack && \
    dnf clean all && \
    rm -rf /var/cache/dnf

# Create non-root user and directories
RUN useradd -r -s /bin/false -m opencv-service && \
    mkdir -p /app && \
    chown -R opencv-service:opencv-service /app

WORKDIR /app

COPY requirements.txt .
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir -r requirements.txt

# Copy application and models from builder
COPY --from=builder /app /app
COPY --from=builder /root/.insightface /home/opencv-service/.insightface
COPY --from=builder /root/.cache /home/opencv-service/.cache

# Ensure proper ownership
RUN chown -R opencv-service:opencv-service /app /home/opencv-service

# Switch to non-root user
USER opencv-service

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV GLOG_minloglevel=2
ENV OMP_NUM_THREADS=4
ENV OPENCV_LOG_LEVEL=ERROR
ENV MEDIAPIPE_DISABLE_GPU=1

# Performance optimizations
ENV OPENBLAS_NUM_THREADS=4
ENV MKL_NUM_THREADS=4
ENV NUMEXPR_NUM_THREADS=4

# Model cache locations
ENV INSIGHTFACE_HOME=/home/opencv-service/.insightface
ENV MEDIAPIPE_CACHE_DIR=/home/opencv-service/.cache/mediapipe

# Expose port
EXPOSE 8002

# Run application
CMD ["python3", "face_detection.py"]