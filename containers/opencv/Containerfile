# -------------------------------
# Stage 1: Builder
# -------------------------------
FROM quay.io/fedora/fedora:latest as builder

LABEL stage=builder

# Copy RPMs into the dnf cache where DNF expects to find them
COPY opencv-container-dnf-packages-build /var/cache/libdnf5

# Install Python 3.12 and build dependencies
RUN dnf update -y && \
    dnf install -y \
        python3.12 \
        python3.12-devel \
        gcc \
        gcc-c++ \
        cmake \
        pkg-config \
        opencv \
        opencv-devel \
        curl \
        wget \
        unzip \
        libgomp \
        glib2-devel \
        libstdc++-devel \
        atlas-devel \
        blas-devel \
        lapack-devel && \
    dnf clean all

# Create working directory
WORKDIR /app

# create python3.12 
RUN mkdir -p /opt/venv

# Create virtual environment with Python 3.12
COPY pip-venv-cache/ /opt/venv

# Activate virtual environment and install pip
RUN /opt/venv/bin/python -m pip install --upgrade pip

# Copy requirements file
COPY requirements.txt /app

# Install Python packages in venv
RUN /opt/venv/bin/pip install -r /app/requirements.txt && \
    rm -f /opt/venv/requirements.txt

# Clean up redundant cache
RUN find /opt/venv -name '*.pyc' -delete && \
    find /opt/venv -name '__pycache__' -type d -exec rm -rf {} + && \
    rm -rf /opt/venv/lib/python*/site-packages/*.dist-info && \
    rm -rf /opt/venv/lib/python*/site-packages/*/{tests,test,*.egg-info}

# Copy application files
COPY *.py /app

# Run model preparation and testing with activated venv
RUN /opt/venv/bin/python test_models.py

# -------------------------------
# Stage 2: Runtime
# -------------------------------
FROM quay.io/fedora/fedora:latest

# Metadata
LABEL maintainer="verification-service@example.com"
LABEL description="Production Face Detection + Liveness Verification Service"
LABEL version="1.0.0"

# Copy RPMs into the dnf cache where DNF expects to find them
COPY opencv-container-dnf-packages-build /var/cache/libdnf5

# Install Python 3.12 and runtime dependencies only
RUN dnf update -y && \
    dnf install -y \
        python3.12 \
        opencv \
        libgomp \
        curl \
        glib2 \
        libstdc++ \
        atlas \
        blas \
        lapack && \
    dnf clean all && \
    rm -rf /var/cache/dnf

    # Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    GLOG_minloglevel=2 \
    OMP_NUM_THREADS=4 \
    OPENCV_LOG_LEVEL=ERROR \
    MEDIAPIPE_DISABLE_GPU=1 \
    # Performance optimizations
    OPENBLAS_NUM_THREADS=4 \
    MKL_NUM_THREADS=4 \
    NUMEXPR_NUM_THREADS=4 \
    # Model cache locations
    INSIGHTFACE_HOME=/home/opencv-service/.insightface \
    MEDIAPIPE_CACHE_DIR=/home/opencv-service/.cache/mediapipe \
    # Activate virtual environment by setting PATH
    PATH="/opt/venv/bin:$PATH"

# Move into the work dir
WORKDIR /app

# Create non-root user and directories
RUN useradd -r -s /bin/false -m opencv-service && \
    mkdir -p /app /home/opencv-service/.cache /home/opencv-service/.insightface && \
    chown -R opencv-service:opencv-service /app /home/opencv-service /opt

# Copy application odels and venv from builder and set ownership
COPY --from=builder --chown=opencv-service:opencv-service /opt/venv /opt/venv
COPY --from=builder --chown=opencv-service:opencv-service /app /app
COPY --from=builder --chown=opencv-service:opencv-service /root/.insightface /home/opencv-service/.insightface
COPY --from=builder --chown=opencv-service:opencv-service /root/.cache /home/opencv-service/.cache

# Switch to non-root user
USER opencv-service

# Expose port
EXPOSE 8002

# Run application with activated venv
CMD ["/opt/venv/bin/python", "face_detection.py"]