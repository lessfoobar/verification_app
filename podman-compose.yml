version: '4'

services:
  # PostgreSQL Database
  postgres:
    container_name: verification-postgres
    build: 
      context: ./containers/postgres
      containerfile: Containerfile
    secrets:
      - pg_admin_pass
      - pg_api_pass
      - pg_audit_pass
      - pg_cleanup_pass
      - pg_postgres_pass
      - pg_staff_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - verification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      # test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    container_name: verification-redis
    build:
      context: ./containers/redis
      containerfile: Containerfile
    secrets:
      - redis_pass
    volumes:
      - redis_data:/data:Z
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - verification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenCV Face Detection Service
  opencv:
    container_name: verification-opencv
    build:
      context: ./containers/opencv
      containerfile: Containerfile
    ports:
      - "${OPENCV_PORT:-8002}:8002"
    networks:
      - verification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go gRPC API Server
  api-grpc:
    container_name: verification-api-grpc
    build:
      context: ./api
      containerfile: Containerfile
      target: grpc-server
    secrets:
      - api_secret_key
      - db_encryption_key
      - jwt_secret
      - pg_admin_pass
      - pg_api_pass
      - pg_audit_pass
      - pg_cleanup_pass
      - pg_postgres_pass
      - pg_staff_pass
      - redis_pass
    ports:
      - "${API_GRPC_PORT:-8000}:8000"
    networks:
      - verification-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opencv:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck", "--grpc"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HTTP Gateway for gRPC
  api-http:
    container_name: verification-api-http
    build:
      context: ./api
      containerfile: Containerfile
      target: http-gateway
    environment:
      - GRPC_SERVER_ENDPOINT=verification-api-grpc:8000
      - CORS_ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${API_HTTP_PORT:-8001}:8001"
    networks:
      - verification-network
    depends_on:
      - api-grpc
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    container_name: verification-frontend
    build:
      context: ./frontend
      containerfile: Containerfile
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8001}
      - NODE_ENV=${ENVIRONMENT:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - verification-network
    depends_on:
      - api-http
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    container_name: verification-nginx
    build:
      context: ./containers/nginx
      containerfile: Containerfile
    environment:
      - DOMAIN=${DOMAIN}
      - SSL_EMAIL=${SSL_EMAIL}
      - USE_SSL=${USE_SSL}
    volumes:
      - nginx_logs:/var/log/nginx:Z
    ports:
      - "${NGINX_PORT_HTTP:-80}:80"
      - "${NGINX_PORT_HTTPS:-443}:443"
    networks:
      - verification-network
    depends_on:
      - frontend
      - api-http
    restart: unless-stopped

secrets:
  api_secret_key:
    external: true
  db_encryption_key:
    external: true
  jwt_secret:
    external: true
  pg_admin_pass:
    external: true
  pg_api_pass:
    external: true
  pg_audit_pass:
    external: true
  pg_cleanup_pass:
    external: true
  pg_postgres_pass:
    external: true
  pg_staff_pass:
    external: true
  redis_pass:
    external: true

networks:
  verification-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local