version: '4'

services:
  # PostgreSQL Database
  postgres:
    container_name: verification-postgres
    build: 
      context: ./containers/postgres
      containerfile: Containerfile
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/backups:/backups
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - verification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    container_name: verification-redis
    build:
      context: ./containers/redis
      containerfile: Containerfile
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - verification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Go gRPC API Server
  api-grpc:
    container_name: verification-api-grpc
    build:
      context: ./api
      containerfile: Containerfile
      target: grpc-server
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - DB_ENCRYPTION_KEY=${DB_ENCRYPTION_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${API_GRPC_PORT}:8000"
    networks:
      - verification-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck", "--grpc"]
      interval: 15s
      timeout: 10s
      retries: 3

  # HTTP Gateway for gRPC
  api-http:
    container_name: verification-api-http
    build:
      context: ./api
      containerfile: Containerfile
      target: http-gateway
    environment:
      - GRPC_SERVER_ENDPOINT=verification-api-grpc:8000
      - CORS_ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "${API_HTTP_PORT}:8001"
    networks:
      - verification-network
    depends_on:
      - api-grpc
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Jitsi Meet Video Service
  jitsi:
    container_name: verification-jitsi
    build:
      context: ./containers/jitsi
      containerfile: Containerfile
    environment:
      - JITSI_SECRET=${JITSI_SECRET}
      - RECORDING_PATH=${JITSI_RECORDING_PATH}
      - DOMAIN=${DOMAIN}
    volumes:
      - jitsi_recordings:/opt/jitsi/recordings
      - jitsi_config:/opt/jitsi/config
    ports:
      - "${JITSI_PORT}:8080"
      - "10000:10000/udp"  # RTP media
    networks:
      - verification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    container_name: verification-frontend
    build:
      context: ./frontend
      containerfile: Containerfile
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_JITSI_URL=${REACT_APP_JITSI_URL}
      - NODE_ENV=${ENVIRONMENT}
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - verification-network
    depends_on:
      - api-http
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    container_name: verification-nginx
    build:
      context: ./containers/nginx
      containerfile: Containerfile
    environment:
      - DOMAIN=${DOMAIN}
      - SSL_EMAIL=${SSL_EMAIL}
      - USE_SSL=${USE_SSL}
    volumes:
      - ./config/ssl:/etc/ssl/certs
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT_HTTP}:80"
      - "${NGINX_PORT_HTTPS}:443"
    networks:
      - verification-network
    depends_on:
      - frontend
      - api-http
      - jitsi
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  verification-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  jitsi_recordings:
    driver: local
  jitsi_config:
    driver: local
  nginx_logs:
    driver: local